# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_plugin "vagrant-berkshelf"
Vagrant.require_plugin "vagrant-omnibus"

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "precise64"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://files.vagrantup.com/precise64.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "..", "/zerg"

  # Enabling vagrant-berkshelf & vagrant-omnibus plugins
  config.berkshelf.enabled    = true
  config.omnibus.chef_version = :latest

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
    # boot with headless mode
    vb.gui = false
    vb.name = "virtdev"
  
    # Use VBoxManage to customize the VM. For example to change memory:
    vb.customize ["modifyvm", :id, "--memory", "1024"]
  end
  

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  config.vm.provision :chef_solo do |chef|
      chef.add_recipe "apt"
      chef.add_recipe "ark"
      chef.add_recipe "dev_env-bootstrap"
      chef.add_recipe "virtualbox"
      chef.add_recipe "packer"
      chef.add_recipe "vagrant"
      chef.add_recipe "git"
      chef.add_recipe "ruby_build"
      chef.add_recipe "rbenv::vagrant"
      chef.add_recipe "rbenv::user"
  
      # You may also specify custom JSON attributes:
      chef.json = { 
        "rbenv" => {
          "user_installs" => [{
            "user" => "vagrant",
            "rubies" => [ "1.9.3-p484" ],
            "global" =>   "1.9.3-p484",
            "gems"   => {
              "1.9.3-p484" => [{ "name" => "bundler" }]
            }
          }]
        },
        "packer" => {
          "version" => "0.5.1"
        },
        "vagrant" => {
          "url" => "https://dl.bintray.com/mitchellh/vagrant/vagrant_1.4.3_x86_64.deb",
          "checksum" => "dbd06de0f3560e2d046448d627bca0cbb0ee34b036ef605aa87ed20e6ad2684b"
        },
        "virtualbox" => {
          "version" => "4.3"
        } 
      }
  end
end
