{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Ship-in-a-bottle: an AWS model of a Nexus Ship Cloud",
    "Parameters": {
        "KeyName": {
            "Type": "String",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the web server",
        },
        "InstanceType": {
            "Description": "Application Server EC2 instance type",
            "Type": "String",
            "AllowedValues": ["t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge"],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "ChefOrganization": {
            "Description": "The Organization name used in Hosted Chef.",
            "Type": "String"
        },
        "ChefEnvironment": {
            "Description": "The Chef Environment.",
            "Type": "String"
        },
        "ChefRunList": {
            "Description": "The Chef runlist.",
            "Type": "String"
        },
        "DomainName": {
            "Description": "Server Domain Name.",
            "Type": "String",
        },
        "S3ChefBucket": {
            "Description": "S3 bucket containing validation private key for Chef Server",
            "Type": "String",
            "Default": "mtn_chef_keys"
        }
    },
    "Mappings": {
        "AWSInstanceType2Arch": {
            "t1.micro": {
                "Arch": "64"
            },
            "m1.small": {
                "Arch": "64"
            },
            "m1.medium": {
                "Arch": "64"
            },
            "m1.large": {
                "Arch": "64"
            },
            "m1.xlarge": {
                "Arch": "64"
            },
            "m2.xlarge": {
                "Arch": "64"
            },
            "m2.2xlarge": {
                "Arch": "64"
            },
            "m2.4xlarge": {
                "Arch": "64"
            },
            "c1.medium": {
                "Arch": "64"
            },
            "c1.xlarge": {
                "Arch": "64"
            }
        },
        "AWSRegionArch2AMI" : {
            "us-east-1"      : { "32" : "ami-31814f58", "64" : "ami-1b814f72" },
            "us-west-2"      : { "32" : "ami-38fe7308", "64" : "ami-30fe7300" },
            "us-west-1"      : { "32" : "ami-11d68a54", "64" : "ami-1bd68a5e" },
            "eu-west-1"      : { "32" : "ami-973b06e3", "64" : "ami-953b06e1" },
            "ap-southeast-1" : { "32" : "ami-b4b0cae6", "64" : "ami-beb0caec" },
            "ap-southeast-2" : { "32" : "ami-b3990e89", "64" : "ami-bd990e87" },
            "ap-northeast-1" : { "32" : "ami-0644f007", "64" : "ami-0a44f00b" },
            "sa-east-1"      : { "32" : "ami-3e3be423", "64" : "ami-3c3be421" }
        }
    },
    "Resources": {
        "VPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },
        "PublicSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ]},
                "Tags" : [
                  { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                  { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },
        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },
        "GatewayToInternet" : {
            "Type" : "AWS::EC2::VPCGatewayAttachment",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "PublicRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },
        "PublicRoute" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "GatewayToInternet",
            "Properties" : {
                "RouteTableId" : { "Ref" : "PublicRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "PublicSubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
            }
        },
        "PublicNetworkAcl" : {
            "Type" : "AWS::EC2::NetworkAcl",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Public" }
                ]
            }
        },
        "InboundHTTPPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "80", "To" : "80" }
            }
        },
        "InboundHTTPSPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "101",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "443", "To" : "443" }
            }
        },
        "InboundSSHPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "102",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Ref" : "SSHLocation" },
                "PortRange" : { "From" : "22", "To" : "22" }
            }
        },
        "InboundSSHPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "102",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : { "Ref" : "SSHLocation" },
                "PortRange" : { "From" : "22", "To" : "22" }
            }
        },
        "InboundRabbitPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "103",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "false",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "5671", "To" : "5672" }
            }
        },
        "OutboundPublicNetworkAclEntry" : {
            "Type" : "AWS::EC2::NetworkAclEntry",
            "Properties" : {
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
                "RuleNumber" : "100",
                "Protocol" : "6",
                "RuleAction" : "allow",
                "Egress" : "true",
                "CidrBlock" : "0.0.0.0/0",
                "PortRange" : { "From" : "0", "To" : "65535" }
            }
        },
        "PublicSubnetNetworkAclAssociation" : {
            "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet" },
                "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
            }
        },


        "PrivateSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Private", "CIDR" ]},
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Private" }
                ]
            }
        },
        "PrivateRouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
                "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
                    { "Key" : "Network", "Value" : "Private" }
                ]
            }
        },
        


        "ChefClientUser": {
            "Type": "AWS::IAM::User",
            "Properties": {
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": ["cloudformation:DescribeStackResource", "s3:Get"],
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "HostKeys": {
            "Type": "AWS::IAM::AccessKey",
            "DependsOn": "ChefClientUser",
            "Properties": {
                "UserName": {
                    "Ref": "ChefClientUser"
                }
            }
        },
        "BucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "DependsOn": "HostKeys",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2008-10-17",
                    "Id": "ReadPolicy",
                    "Statement": [
                        {
                            "Sid": "ReadAccess",
                            "Action": ["s3:GetObject"],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": ["",
                                    ["arn:aws:s3:::", {
                                            "Ref": "S3ChefBucket"
                                        }, "/*"
                                    ]
                                ]
                            },
                            "Principal": {
                                "AWS": {
                                    "Fn::GetAtt": ["ChefClientUser", "Arn"]
                                }
                            }
                        }
                    ]
                },
                "Bucket": {
                    "Ref": "S3ChefBucket"
                }
            }
        },
        "AppServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "LaunchConfigurationName": {
                    "Ref": "ChefClient"
                },
                "LoadBalancerNames": [
                    {
                        "Ref": "app.stratalux.com"
                    }
                ],
                "MinSize": "3",
                "MaxSize": "6",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": "720",
                "NotificationConfiguration": {
                    "TopicARN": {
                        "Ref": "AppServerSNSTopic"
                    },
                    "NotificationTypes": ["autoscaling:EC2_INSTANCE_LAUNCH", "autoscaling:EC2_INSTANCE_LAUNCH_ERROR", "autoscaling:EC2_INSTANCE_TERMINATE", "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
                }
            }
        },
        "ChefClient": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": "BucketPolicy",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "rubygems": {
                                "chef": ["10.14.2"],
                                "ohai": ["0.6.4"]
                            },
                            "apt": {
                                "build-essential": [],
                                "curl": [],
                                "irb": [],
                                "libopenssl-ruby": [],
                                "libreadline-ruby1.8": [],
                                "libruby1.8": [],
                                "libxslt-dev": [],
                                "libxml2-dev": [],
                                "libxml2": [],
                                "rdoc": [],
                                "ri": [],
                                "ruby": [],
                                "ruby-dev": [],
                                "rubygems": [],
                                "s3cmd": [],
                                "ssl-cert": [],
                                "wget": []
                            }
                        },
                        "files": {
                            "/etc/chef/first-boot.json": {
                                "content": {
                                    "run_list": {
                                        "Ref": "ChefRunList"
                                    },
                                    "mode": "000644",
                                    "owner": "root",
                                    "group": "root"
                                }
                            },
                            "/home/ubuntu/.s3cfg": {
                                "content": {
                                    "Fn::Join": ["",
                                        ["[default]\n", "access_key = ", {
                                                "Ref": "HostKeys"
                                            }, "\n", "secret_key = ", {
                                                "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]
                                            }, "\n", "use_https = True\n"
                                        ]
                                    ]
                                },
                                "mode": "000644",
                                "owner": "ubuntu",
                                "group": "ubuntu"
                            },
                            "/var/lib/gems/1.8/gems/ohai-0.6.4/lib/ohai/plugins/cfn.rb": {
                                "source": "https://s3.amazonaws.com/cloudformation-examples/cfn.rb",
                                "mode": "000644",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "SecurityGroups": [
                    {
                        "Ref": "AppServerAccess"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": ["AWSRegionArch2AMI", {
                            "Ref": "AWS::Region"
                        }, {
                            "Fn::FindInMap": ["AWSInstanceType2Arch", {
                                    "Ref": "InstanceType"
                                }, "Arch"
                            ]
                        }
                    ]
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["",
                            ["#!/bin/bash -v\n", "function error_exit\n", "{\n", "  cfn-signal -e 1 -r \"$1\" '", {
                                    "Ref": "ChefClientWaitHandle"
                                }, "'\n", "  exit 1\n", "}\n", "apt-get update; apt-get upgrade -y; apt-get -y remove apparmor libapparmor1 ; apt-get -y install python-setuptools\n", "easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.0-6.tar.gz\n", "cfn-init --region ", {
                                    "Ref": "AWS::Region"
                                }, "    -s ", {
                                    "Ref": "AWS::StackName"
                                }, " -r ChefClient ", "         --access-key ", {
                                    "Ref": "HostKeys"
                                }, "         --secret-key ", {
                                    "Fn::GetAtt": ["HostKeys", "SecretAccessKey"]
                                }, "         --region     ", {
                                    "Ref": "AWS::Region"
                                }, " || error_exit 'Failed to run cfn-init'\n", "# Fixup path and links for the bootstrap script\n", "export PATH=$PATH:/var/lib/gems/1.8/bin\n", "s3cmd -c /home/ubuntu/.s3cfg get s3://", {
                                    "Ref": "S3ChefBucket"
                                }, "/chef_init.rb /etc/chef/chef_init.rb > /tmp/get_chef_init.log 2>&1 || error_exit 'Failed to get Chef initialization script.'\n", "ruby /etc/chef/chef_init.rb ", {
                                    "Ref": "DomainName"
                                }, " ", {
                                    "Ref": "ChefEnvironment"
                                }, " ", {
                                    "Ref": "ChefOrganization"
                                }, " >> /tmp/get_chef_init.log 2>&1 || error_exit 'Failed to run chef_init script.'\n", "# Fixup the server URL in client.rb\n", "s3cmd -c /home/ubuntu/.s3cfg get s3://", {
                                    "Ref": "S3ChefBucket"
                                }, "/validation.pem /etc/chef/validation.pem > /tmp/get_validation_key.log 2>&1 || error_exit 'Failed to get Chef Server validation key'\n", "s3cmd -c /home/ubuntu/.s3cfg get s3://", {
                                    "Ref": "S3ChefBucket"
                                }, "/encrypted_data_bag_secret /etc/chef/encrypted_data_bag_secret > /tmp/encrypted_data_bag_secret.log 2>&1 || error_exit 'Failed to get Chef encrypted data bag secret.'\n", "chmod 600 /etc/chef/encrypted_data_bag_secret \n", "chef-client -j /etc/chef/first-boot.json > /tmp/initialize_client.log 2>&1 || error_exit 'Failed to initialize host via chef client' \n", "# If all went well, signal success\n", "cfn-signal -e $? -r 'Chef Server configuration' '", {
                                    "Ref": "ChefClientWaitHandle"
                                }, "'\n"
                            ]
                        ]
                    }
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                }
            }
        },
        "AppServerAccess": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "AppServerAccess",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }, {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "app.stratalux.com": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "HealthCheck": {
                    "HealthyThreshold": "10",
                    "Interval": "15",
                    "Target": "HTTP:80/monitor/healthcheck",
                    "Timeout": "2",
                    "UnhealthyThreshold": "2"
                },
                "Listeners": [
                    {
                        "InstancePort": "80",
                        "LoadBalancerPort": "443",
                        "Protocol": "HTTPS",
                        "SSLCertificateId": "arn:aws:iam::1234567890:server-certificate/stratalux.com.2012",
                        "PolicyNames": []
                    }, {
                        "InstancePort": "80",
                        "LoadBalancerPort": "80",
                        "Protocol": "HTTP",
                        "PolicyNames": []
                    }
                ]
            }
        },
        "AppServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AppServerGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "AppServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AppServerGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 75% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "10",
                "Threshold": "75",
                "AlarmActions": [
                    {
                        "Ref": "AppServerScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AppServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 75% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "10",
                "Threshold": "75",
                "AlarmActions": [
                    {
                        "Ref": "AppServerScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AppServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "ChefClientWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        },
        "ChefClientWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "ChefClient",
            "Properties": {
                "Handle": {
                    "Ref": "ChefClientWaitHandle"
                },
                "Timeout": "1200"
            }
        }
    }
}